<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NON-TECH</title>
  
  <subtitle>非技术不存在</subtitle>
  <link href="http://nontech.top/atom.xml" rel="self"/>
  
  <link href="http://nontech.top/"/>
  <updated>2021-03-01T07:15:20.897Z</updated>
  <id>http://nontech.top/</id>
  
  <author>
    <name>Uray Chow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>查看正在运行的程序</title>
    <link href="http://nontech.top/2021/03/01/%E6%9F%A5%E7%9C%8B%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <id>http://nontech.top/2021/03/01/%E6%9F%A5%E7%9C%8B%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-03-01T06:02:33.000Z</published>
    <updated>2021-03-01T07:15:20.897Z</updated>
    
    <content type="html"><![CDATA[<p><em>某一天，nginx重新make之后，发现一直有问题，就想看看它的运行状态和启动状态。</em><br><em>就有了接下来的意外发现~~~</em></p><a id="more"></a><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><pre><code>[root@fair-laser-1 ~]# ps -ef | grep nginxroot      6207     1  0 Feb26 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confnobody    6208  6207  0 Feb26 ?        00:00:03 nginx: worker processroot      6363  6312  0 14:42 pts/1    00:00:00 grep --color=auto nginx</code></pre><p>可以看到，第一个是 master，第二个是 worker；所以我们记住第一个进程号 6207</p><h3 id="查询nginx程序的路径"><a href="#查询nginx程序的路径" class="headerlink" title="查询nginx程序的路径"></a>查询nginx程序的路径</h3><pre><code>[root@fair-laser-1 ~]# ll /proc/6207/exe     lrwxrwxrwx 1 root root 0 Feb 27 00:00 /proc/6207/exe -&gt; /usr/local/nginx/sbin/nginx-bak</code></pre><p>这里发现了我的问题，原来没有使用新的nginx来运行，仍然是跑的老nginx。</p><h3 id="进一步查看配置文件"><a href="#进一步查看配置文件" class="headerlink" title="进一步查看配置文件"></a>进一步查看配置文件</h3><pre><code>[root@fair-laser-1 ~]# /usr/local/nginx/sbin/nginx-bak -t    nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</code></pre><p>这里可以看到配置文件，我的是没什么问题。</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><pre><code>找到了问题，只要关掉旧的 nginx，重新启动新的 ngxin 程序就好了。nginx -s stop/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在重新 make 之前，先将原来的nginx改名为nginx-bak，在make之后，没有先停止再启动，而是大意的使用命令重启了nginx<br>    nginx -s reload<br>这是错误的方式</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;某一天，nginx重新make之后，发现一直有问题，就想看看它的运行状态和启动状态。&lt;/em&gt;&lt;br&gt;&lt;em&gt;就有了接下来的意外发现~~~&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="nginx" scheme="http://nontech.top/tags/nginx/"/>
    
    <category term="系统" scheme="http://nontech.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="小窍门" scheme="http://nontech.top/tags/%E5%B0%8F%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>frp-初体验</title>
    <link href="http://nontech.top/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://nontech.top/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2021-02-25T01:53:12.000Z</published>
    <updated>2021-03-01T07:18:44.959Z</updated>
    
    <content type="html"><![CDATA[<p><em>都听人说黑群晖，自己也搭一个试试（挺麻烦，过程以后再写），虽然一直开着费电，不过练习一下还是蛮有趣。</em><br><em>搭好之后，用一个免费的局域网软件和自己的手机连上了，但是很不稳定，于是研究下 frp，看看能不能取得更好的效果</em></p><a id="more"></a><h3 id="服务端安装配置"><a href="#服务端安装配置" class="headerlink" title="服务端安装配置"></a>服务端安装配置</h3><h4 id="服务器上下载最新release的-frp"><a href="#服务器上下载最新release的-frp" class="headerlink" title="服务器上下载最新release的 frp"></a>服务器上下载最新release的 frp</h4><p>首先有台有外网（外部网络）IP的服务器，我的是Centos7系统的，进入 /usr/local 目录<br>（我也不知道为啥进这里，因为别人都进这）</p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.35.1/frp_0.35.1_linux_amd64.tar.gz</code></pre><img src="/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/download.jpg" class title="下载"><h4 id="解压文件并进入之"><a href="#解压文件并进入之" class="headerlink" title="解压文件并进入之"></a>解压文件并进入之</h4><pre><code>tar -vxf frp_0.35.1_linux_amd64.tar.gzcd frp_0.35.1_linux_amd64</code></pre><img src="/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/tar.jpg" class title="解压"><h4 id="编辑-frps-ini"><a href="#编辑-frps-ini" class="headerlink" title="编辑 frps.ini"></a>编辑 frps.ini</h4><pre><code>vim frps.ini[common]bind_port = 7000            # frp在服务端机器的端口vhost_http_port = 10101     # frp监听外网http请求的端口dashboard_port = 7003       # frp控制台端口dashboard_user = admin      # frp控制台用户名dashboard_pwd = admin       # frp控制台访问密码</code></pre><p>vhost_http_port 原来是80，我在启动的时候，报冲突，于是改了一个，记住就好，待会要配到frpc.ini</p><h4 id="配置-frp-service"><a href="#配置-frp-service" class="headerlink" title="配置 frp.service"></a>配置 frp.service</h4><pre><code>vim /usr/lib/systemd/system/frp.service[Unit]Description=The nginx HTTP and reverse proxy serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=simpleExecStart=/usr/local/your_folder_name/frps -c /usr/local/your_folder_name/frps.iniKillSignal=SIGQUITTimeoutStopSec=5KillMode=processPrivateTmp=trueStandardOutput=syslogStandardError=inherit[Install]WantedBy=multi-user.target</code></pre><p>将your_folder_name更换为自己frp文件夹</p><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><pre><code>systemctl start frpsystemctl status frp</code></pre><img src="/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/frps_suc.jpg" class title="成功启动"><h3 id="客户端安装配置"><a href="#客户端安装配置" class="headerlink" title="客户端安装配置"></a>客户端安装配置</h3><h4 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h4><p>因为我的系统是win10, 于是下载了这个</p><img src="/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/win_download.jpg" class title="win下载"><h4 id="将其解压到一个你喜欢的地方并进入之"><a href="#将其解压到一个你喜欢的地方并进入之" class="headerlink" title="将其解压到一个你喜欢的地方并进入之"></a>将其解压到一个你喜欢的地方并进入之</h4><img src="/2021/02/25/frp-%E5%88%9D%E4%BD%93%E9%AA%8C/win_frp.jpg" class title="win解压"><h4 id="编辑-frpc-ini"><a href="#编辑-frpc-ini" class="headerlink" title="编辑 frpc.ini"></a>编辑 frpc.ini</h4><pre><code>[common]server_addr = 10.10.10.10       # 外部服务器 IPserver_port = 7000              # frp 服务的端口[web]                           # 和上面的配置一样名称type = http                     # 这里改成 http（不明所以）local_ip = 127.0.0.1            # 本机 IPlocal_port = 8080               # 内网要暴露的服务端口remote_port = 10101             # http 访问的端口custom_domains = 10.10.10.10    # 外部网IP或域名</code></pre><p>server_addr 就是你的服务端外网IP<br>type 改为http<br>custom_domains 与server_addr一致</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>完成编辑，就可以启动了，进入frp的根目录，执行：<br>    frpc.exe<br>第一次没有成功，因为忘记在服务器上开放7000端口。<br><em>开放端口请参考另一篇文章：<a href="https://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/">https://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/</a></em></p><p>再次执行命令，成功启动了。</p><p>访问：10.10.10.10:10101 即可访问到内网服务<br>至此完成，后续补充~~~</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>使用frp几天，简直太方便，但是也慢慢感觉到有更多的需要。<br>家里的机器也需要内网穿透暴露一些服务，于是读了读大神们的文章。<br>如何使用一台 frps 穿透多个 frpc。<br>这里要使用到二级域名。</p><h3 id="修改服务端-frps-ini"><a href="#修改服务端-frps-ini" class="headerlink" title="修改服务端 frps.ini"></a>修改服务端 frps.ini</h3><pre><code>[common]bind_port = 7000vhost_http_port = 10101# 控制台dashboard_port = 7003dashboard_user = admindashboard_pwd = admin# token验证privilege_token = frp# 连接池max_pool_count = 5# 日志log_file = ./frps.loglog_level = infolog_max_days = 3# 自定义二级域名subdomain_host = [subdomain].mydomain.com</code></pre><p>新添加的 subdomain_host 配置为 [subdomain].mydomain.com，这里mydomain.com 是解析到你服务器ip的</p><h3 id="修改客户端-frpc-ini"><a href="#修改客户端-frpc-ini" class="headerlink" title="修改客户端 frpc.ini"></a>修改客户端 frpc.ini</h3><pre><code>[common]server_addr = 10.10.10.10server_port = 7000privilege_token = frp[web]type = httplocal_ip = 127.0.0.1local_port = 8080# remote_port = 10101# custom_domains = 10.10.10.10subdomain = [name]</code></pre><p>新添加的 subdomain，自己取个名字即可</p><h3 id="二级域名解析"><a href="#二级域名解析" class="headerlink" title="二级域名解析"></a>二级域名解析</h3><p>因为多台内网设备都要使用，因此需要将*.[subdomain].mydomain.com在你的域名服务商做一个 A 解析即可。<br>并且将 *.[subdomain].mydomain.com 加入服务端nginx监听中，然后重定向到服务端的 frps 的 vhost_http_port 字段<br>    server {<br>        listen          10100; #用于外部访问的端口<br>        server_name     *.[subdomain].mydomain.com #这里是重点<br>        location / {<br>            proxy_redirect          off;<br>            proxy_set_header        Host            $host:$server_port;<br>            proxy_set_header        X-Forwarded-For $remote_addr;<br>            client_max_body_size    20m;<br>            client_body_buffer_size 128k;<br>            proxy_connect_timeout   600;<br>            proxy_send_timeout      600;<br>            proxy_read_timeout      900;<br>            proxy_buffer_size       4k;<br>            proxy_buffers           4 32k;<br>            proxy_busy_buffers_size 64k;<br>            proxy_temp_file_write_size 64k;<br>            proxy_pass <a href="http://127.0.0.1:10101/">http://127.0.0.1:10101/</a>; #这里是重点<br>        }<br>    }</p><p>如此，重启服务和客户端，访问 [name].[subdomain].mydomain.com:10100 即可访问到 内网 8080 的服务 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;都听人说黑群晖，自己也搭一个试试（挺麻烦，过程以后再写），虽然一直开着费电，不过练习一下还是蛮有趣。&lt;/em&gt;&lt;br&gt;&lt;em&gt;搭好之后，用一个免费的局域网软件和自己的手机连上了，但是很不稳定，于是研究下 frp，看看能不能取得更好的效果&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="网络技术" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="frp" scheme="http://nontech.top/tags/frp/"/>
    
    <category term="内网穿透" scheme="http://nontech.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="多个内网服务" scheme="http://nontech.top/tags/%E5%A4%9A%E4%B8%AA%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>H5-分割线的一点小技巧</title>
    <link href="http://nontech.top/2021/02/24/H5-%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://nontech.top/2021/02/24/H5-%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2021-02-24T05:58:25.000Z</published>
    <updated>2021-02-24T06:55:34.954Z</updated>
    
    <content type="html"><![CDATA[<p><em>在写页面的时候，经常会遇到要用分隔线的时候</em><br><em>捡了一位大大线程的资源，留作记录</em><br><em>千恩万谢的大佬：<a href="https://blog.csdn.net/weixin_39198406/article/details/78827671">https://blog.csdn.net/weixin_39198406/article/details/78827671</a></em></p><a id="more"></a><p><em>结果并未全部验证</em></p><h3 id="平民分割线"><a href="#平民分割线" class="headerlink" title="平民分割线"></a>平民分割线</h3><h5 id="朴素版"><a href="#朴素版" class="headerlink" title="朴素版"></a>朴素版</h5><pre><code>&lt;HR&gt;</code></pre><h5 id="搭配参数分隔线"><a href="#搭配参数分隔线" class="headerlink" title="搭配参数分隔线"></a>搭配参数分隔线</h5><pre><code>&lt;HR align=center width=300 color=#987cb9 SIZE=1&gt;</code></pre><h3 id="华丽分割线"><a href="#华丽分割线" class="headerlink" title="华丽分割线"></a>华丽分割线</h3><h5 id="两端渐变透明"><a href="#两端渐变透明" class="headerlink" title="两端渐变透明"></a>两端渐变透明</h5><pre><code>&lt;HR style=&quot;FILTER: alpha(opacity=100,finishopacity=0,style=3)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=3&gt;</code></pre><h5 id="纺锤形状"><a href="#纺锤形状" class="headerlink" title="纺锤形状"></a>纺锤形状</h5><pre><code>&lt;HR style=&quot;FILTER: alpha(opacity=100,finishopacity=0,style=2)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=10&gt;</code></pre><h5 id="右端渐变透明"><a href="#右端渐变透明" class="headerlink" title="右端渐变透明"></a>右端渐变透明</h5><pre><code>&lt;HR style=&quot;FILTER: alpha(opacity=100,finishopacity=0,style=1)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=3&gt;</code></pre><h5 id="左端渐变透明"><a href="#左端渐变透明" class="headerlink" title="左端渐变透明"></a>左端渐变透明</h5><pre><code>&lt;HR style=&quot;FILTER: alpha(opacity=0,finishopacity=100,style=1)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=3&gt;</code></pre><h5 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h5><pre><code>&lt;HR style=&quot;border:1 dashed #987cb9&quot; width=&quot;80%&quot; color=#987cb9 SIZE=1&gt;</code></pre><h5 id="双线"><a href="#双线" class="headerlink" title="双线"></a>双线</h5><pre><code>&lt;HR style=&quot;border:3 double #987cb9&quot; width=&quot;80%&quot; color=#987cb9 SIZE=3&gt;</code></pre><h5 id="立体感官"><a href="#立体感官" class="headerlink" title="立体感官"></a>立体感官</h5><pre><code>&lt;HR style=&quot;FILTER: progid:DXImageTransform.Microsoft.Shadow(color:#987cb9,direction:145,strength:15)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=1&gt;</code></pre><h5 id="仿若钢针"><a href="#仿若钢针" class="headerlink" title="仿若钢针"></a>仿若钢针</h5><pre><code>&lt;HR style=&quot;FILTER: progid:DXImageTransform.Microsoft.Glow(color=#987cb9,strength=10)&quot; width=&quot;80%&quot; color=#987cb9 SIZE=1&gt;</code></pre><h5 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h5><pre><code>&lt;table border=&quot;1px&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;height:265px;border-left-style:solid; border-bottom-style:none;border-right-style:none;border-top-style:none&quot;&gt;</code></pre><h3 id="示例（没有体现出垂直方向的）"><a href="#示例（没有体现出垂直方向的）" class="headerlink" title="示例（没有体现出垂直方向的）"></a>示例（没有体现出垂直方向的）</h3><img src="/2021/02/24/H5-%E5%88%86%E5%89%B2%E7%BA%BF%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%8A%80%E5%B7%A7/eg.jpg" class title="放开菜单配置">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;在写页面的时候，经常会遇到要用分隔线的时候&lt;/em&gt;&lt;br&gt;&lt;em&gt;捡了一位大大线程的资源，留作记录&lt;/em&gt;&lt;br&gt;&lt;em&gt;千恩万谢的大佬：&lt;a href=&quot;https://blog.csdn.net/weixin_39198406/article/details/78827671&quot;&gt;https://blog.csdn.net/weixin_39198406/article/details/78827671&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="前端" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="H5" scheme="http://nontech.top/tags/H5/"/>
    
    <category term="分隔线" scheme="http://nontech.top/tags/%E5%88%86%E9%9A%94%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Foxmail-添加Gmail-设置代理</title>
    <link href="http://nontech.top/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://nontech.top/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2021-02-24T03:29:50.000Z</published>
    <updated>2021-02-24T05:47:15.611Z</updated>
    
    <content type="html"><![CDATA[<p><em>搭了个梯子，pc上也配好了客户端，一切看好，拜各位技术大佬的山头更方便了</em><br><em>就在我想飞的更高的时候，foxmail-gmail给了我当头一棒</em><br><em>找了很多方法都没成功，最后一种很简单的方式，解决了，记录一下 ^_^</em></p><a id="more"></a><h3 id="新增账户"><a href="#新增账户" class="headerlink" title="新增账户"></a>新增账户</h3><img src="/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/add_account.jpg" class title="新增账户"><p>输入账户、密码，点击 “创建”，会有类似如下提示：</p><img src="/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/failed.jpg" class title="验证失败"><p>点击 “代理设置”，在弹出的卡片中填入红框中信息</p><img src="/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/proxy.jpg" class title="代理设置"><p><em>那么红框中的信息是哪来的呢？就要从我的梯子中说起了</em></p><h3 id="梯子的信息"><a href="#梯子的信息" class="headerlink" title="梯子的信息"></a>梯子的信息</h3><img src="/2021/02/24/Foxmail-%E6%B7%BB%E5%8A%A0Gmail-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/ladder.jpg" class title="本地梯子"><p>因为我事先使用V2RayW搭好了梯子，在本地暴露出了8001端口，<br>所以在foxmail中直接配置上就可以使用了。</p><p><em>相信有好多小白也许会遇到和我类似的问题，希望能帮到你们</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;搭了个梯子，pc上也配好了客户端，一切看好，拜各位技术大佬的山头更方便了&lt;/em&gt;&lt;br&gt;&lt;em&gt;就在我想飞的更高的时候，foxmail-gmail给了我当头一棒&lt;/em&gt;&lt;br&gt;&lt;em&gt;找了很多方法都没成功，最后一种很简单的方式，解决了，记录一下 ^_^&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="网络技术" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Foxmail" scheme="http://nontech.top/tags/Foxmail/"/>
    
    <category term="Gmail邮箱" scheme="http://nontech.top/tags/Gmail%E9%82%AE%E7%AE%B1/"/>
    
    <category term="代理" scheme="http://nontech.top/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next 使用tags、categories等菜单</title>
    <link href="http://nontech.top/2021/02/23/hexo-next-%E4%BD%BF%E7%94%A8tags%E3%80%81categories%E7%AD%89%E8%8F%9C%E5%8D%95/"/>
    <id>http://nontech.top/2021/02/23/hexo-next-%E4%BD%BF%E7%94%A8tags%E3%80%81categories%E7%AD%89%E8%8F%9C%E5%8D%95/</id>
    <published>2021-02-23T09:56:22.000Z</published>
    <updated>2021-02-24T02:48:11.284Z</updated>
    
    <content type="html"><![CDATA[<p><em>next 主题中，tags、categories 等菜单默认关闭的，在配置文件中将其放开即可显示。然鹅~~~</em><br><em>页面上点开就出现了 “Cannot GET /tags/”，于是，拜了几个山头，讨回了一点经验</em><br><em>感谢大佬：<a href="https://www.lwhweb.com/posts/765/">https://www.lwhweb.com/posts/765/</a></em></p><a id="more"></a><h3 id="新建页面，以tags为例："><a href="#新建页面，以tags为例：" class="headerlink" title="新建页面，以tags为例："></a>新建页面，以tags为例：</h3><pre><code>hexo new page &quot;tags&quot;</code></pre><p>执行以上命令，即可生成 /source/tags/index.md 文件，这样可以确保在打包时在 /tags/下面生成index.html<br>这也是问题的关键所在</p><h3 id="修改新生成的-source-tags-index-md，加入-“type-tags”"><a href="#修改新生成的-source-tags-index-md，加入-“type-tags”" class="headerlink" title="修改新生成的 /source/tags/index.md，加入 “type: tags”"></a>修改新生成的 /source/tags/index.md，加入 “type: tags”</h3><pre><code>---title: tags（自己定义，显示在页面）date: 2021-02-23 17:23:37type: tags---</code></pre><h3 id="修改主题的配置文件，例如：-config-next-yml"><a href="#修改主题的配置文件，例如：-config-next-yml" class="headerlink" title="修改主题的配置文件，例如：_config.next.yml"></a>修改主题的配置文件，例如：_config.next.yml</h3><img src="/2021/02/23/hexo-next-%E4%BD%BF%E7%94%A8tags%E3%80%81categories%E7%AD%89%E8%8F%9C%E5%8D%95/release_conf.jpg" class title="放开菜单配置"><p>放开对应菜单的配置，如果没有，添加即可</p><p><em>至此结束</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;next 主题中，tags、categories 等菜单默认关闭的，在配置文件中将其放开即可显示。然鹅~~~&lt;/em&gt;&lt;br&gt;&lt;em&gt;页面上点开就出现了 “Cannot GET /tags/”，于是，拜了几个山头，讨回了一点经验&lt;/em&gt;&lt;br&gt;&lt;em&gt;感谢大佬：&lt;a href=&quot;https://www.lwhweb.com/posts/765/&quot;&gt;https://www.lwhweb.com/posts/765/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="hexo" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/hexo/"/>
    
    
    <category term="hexo" scheme="http://nontech.top/tags/hexo/"/>
    
    <category term="next" scheme="http://nontech.top/tags/next/"/>
    
    <category term="menu" scheme="http://nontech.top/tags/menu/"/>
    
  </entry>
  
  <entry>
    <title>Linux Anaconda Python3</title>
    <link href="http://nontech.top/2021/02/23/Linux-Anaconda-Python3/"/>
    <id>http://nontech.top/2021/02/23/Linux-Anaconda-Python3/</id>
    <published>2021-02-23T07:06:01.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>请勿使用 root 用户直接安装</em></p><a id="more"></a><h3 id="下载-Anaconda"><a href="#下载-Anaconda" class="headerlink" title="下载 Anaconda"></a>下载 Anaconda</h3><pre><code>wget -c -t 20 https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh</code></pre><img src="/2021/02/23/Linux-Anaconda-Python3/download_anaconda.jpg" class title="download"><h3 id="开始安装-Anaconda"><a href="#开始安装-Anaconda" class="headerlink" title="开始安装 Anaconda"></a>开始安装 Anaconda</h3><pre><code>./Anaconda3-2020.02-Linux-x86_64.sh</code></pre><p>执行以上命令后，会提示阅读许可文件，一路回车</p><img src="/2021/02/23/Linux-Anaconda-Python3/license.jpg" class title="preinstall"><p>直到提示输入 “yes”，敲回车，之后再敲一次回车</p><img src="/2021/02/23/Linux-Anaconda-Python3/preinstall.jpg" class title="preinstall"><h3 id="确认安装"><a href="#确认安装" class="headerlink" title="确认安装"></a>确认安装</h3><p>确认安装 anaconda</p><img src="/2021/02/23/Linux-Anaconda-Python3/confirm_install.jpg" class title="confirm install"><p><em>至此安装过程完成。</em></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><pre><code>vim ~/.bashrc</code></pre><h4 id="注释掉-“-gt-gt-gt-conda-initiallize-gt-gt-gt-”-之间的内容，并添加以下两行代码"><a href="#注释掉-“-gt-gt-gt-conda-initiallize-gt-gt-gt-”-之间的内容，并添加以下两行代码" class="headerlink" title="注释掉 “#&gt;&gt;&gt; conda initiallize &gt;&gt;&gt;” 之间的内容，并添加以下两行代码"></a>注释掉 “#&gt;&gt;&gt; conda initiallize &gt;&gt;&gt;” 之间的内容，并添加以下两行代码</h4><pre><code>export PATH=&quot;/home/[username]/anaconda3/bin:PATH&quot;export LD_LIBRARY_PATH=&quot;/home/[username]/anaconda3/lib:LD_LIBRARY_PATH&quot;</code></pre><h4 id="更新环境变量，执行以下命令"><a href="#更新环境变量，执行以下命令" class="headerlink" title="更新环境变量，执行以下命令"></a>更新环境变量，执行以下命令</h4><pre><code>source ~/.bashrc</code></pre><p>如果出现问题，执行以下命令还原回来：</p><pre><code>export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</code></pre><h3 id="检验是否成功"><a href="#检验是否成功" class="headerlink" title="检验是否成功"></a>检验是否成功</h3><pre><code>conda --version</code></pre><img src="/2021/02/23/Linux-Anaconda-Python3/check.jpg" class title="检验"><h3 id="怪异的-base-与-activate、deactivate"><a href="#怪异的-base-与-activate、deactivate" class="headerlink" title="怪异的(base) 与 activate、deactivate"></a>怪异的(base) 与 activate、deactivate</h3><p>注意到上边图片中命令行前端多了个 “(base)”，深感疑惑。<br><em>原来这是conda的虚拟环境</em><br>输入 python，如下图，是新安装的 python3</p><img src="/2021/02/23/Linux-Anaconda-Python3/check_py3.jpg" class title="检验python版本"><p>输入 conda deactivate，如下图，“(base)”消失了，<br>再输入python，变回了原来系统默认安装的 python2</p><img src="/2021/02/23/Linux-Anaconda-Python3/check_py2.jpg" class title="检验python版本"><p>但是重新打开命令行，又出现了“(base)”，因为 conda 配置中的 auto_activate_base 默认是 true</p><img src="/2021/02/23/Linux-Anaconda-Python3/conda_conf_show.jpg" class title="show conda config"><p>将其改为false，执行以下命令：</p><pre><code>conda config --set auto_activate_base false</code></pre><p>如此需要开启 conda 环境时，只需执行以下命令即可：</p><pre><code>conda activate</code></pre><p>至此可以开始使用 anaconda 了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;请勿使用 root 用户直接安装&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="Python" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/Python/"/>
    
    
    <category term="Anaconda" scheme="http://nontech.top/tags/Anaconda/"/>
    
    <category term="Python2" scheme="http://nontech.top/tags/Python2/"/>
    
    <category term="Python3" scheme="http://nontech.top/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>hexo-插入图片</title>
    <link href="http://nontech.top/2021/02/23/hexo-%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://nontech.top/2021/02/23/hexo-%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</id>
    <published>2021-02-23T01:58:49.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>今天想要试试在hexo博客中插入图片，按照官方文档试了下没成功，</em><br><em>翻看了一下别人的经验~~，原来是这样。</em><br><em>记录于此</em></p><a id="more"></a><h3 id="进入hexo博客根目录，安装个插件"><a href="#进入hexo博客根目录，安装个插件" class="headerlink" title="进入hexo博客根目录，安装个插件"></a>进入hexo博客根目录，安装个插件</h3><pre><code>npm install hexo-asset-image --save</code></pre><h3 id="修改根目录下的-config-yml"><a href="#修改根目录下的-config-yml" class="headerlink" title="修改根目录下的 _config.yml"></a>修改根目录下的 _config.yml</h3><pre><code>post_asset_folder: true</code></pre><p>这样就可以在 新建文章时在_post下面会生成一个和文章同名的文件夹，将要使用的图片等静态资源放在这里</p><h3 id="修改-hexo-asset-image-中的源码，将-node-modules-hexo-asset-image-index-js-中代码替换如下"><a href="#修改-hexo-asset-image-中的源码，将-node-modules-hexo-asset-image-index-js-中代码替换如下" class="headerlink" title="修改 hexo-asset-image 中的源码，将 /node_modules/hexo-asset-image/index.js 中代码替换如下"></a>修改 hexo-asset-image 中的源码，将 /node_modules/hexo-asset-image/index.js 中代码替换如下</h3><pre><code>&#39;use strict&#39;;var cheerio = require(&#39;cheerio&#39;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123;return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split(&#39;.&#39;);hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;    var config = hexo.config;    if(config.post_asset_folder)&#123;        var link = data.permalink;        if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)            var beginPos = getPosition(link, &#39;/&#39;, 1) + 1;        else            var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;        // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.        var endPos = link.lastIndexOf(&#39;/&#39;) + 1;        link = link.substring(beginPos, endPos);        var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];        for(var i = 0; i &lt; toprocess.length; i++)&#123;            var key = toprocess[i];            var $ = cheerio.load(data[key], &#123;            ignoreWhitespace: false,            xmlMode: false,            lowerCaseTags: false,            decodeEntities: false            &#125;);            $(&#39;img&#39;).each(function()&#123;                if ($(this).attr(&#39;src&#39;))&#123;                    // For windows style path, we replace &#39;\&#39; to &#39;/&#39;.                    var src = $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;/&#39;);                    if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;                    !/^\s*\//.test(src)) &#123;                    // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.                    // In addition, to support multi-level local directory.                    var linkArray = link.split(&#39;/&#39;).filter(function(elem)&#123;                        return elem != &#39;&#39;;                    &#125;);                    var srcArray = src.split(&#39;/&#39;).filter(function(elem)&#123;                        return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;                    &#125;);                    if(srcArray.length &gt; 1)                        srcArray.shift();                    src = srcArray.join(&#39;/&#39;);                    $(this).attr(&#39;src&#39;, config.root + link + src);                    console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);                    &#125;                &#125;else&#123;                    console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);                    console.info&amp;&amp;console.info($(this));                &#125;            &#125;);            data[key] = $.html();        &#125;    &#125;&#125;);</code></pre><p>如果不做以上替换，我生成的图片路径前面总是会加上 “/.top/“ 前缀，导致图片访问不到</p><h3 id="在文章中使用如下标签引用图片"><a href="#在文章中使用如下标签引用图片" class="headerlink" title="在文章中使用如下标签引用图片"></a>在文章中使用如下标签引用图片</h3><pre><code>&#123;% asset_img(这个不变) 图片名称.jpg 文字注释 %&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;今天想要试试在hexo博客中插入图片，按照官方文档试了下没成功，&lt;/em&gt;&lt;br&gt;&lt;em&gt;翻看了一下别人的经验~~，原来是这样。&lt;/em&gt;&lt;br&gt;&lt;em&gt;记录于此&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="hexo" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/hexo/"/>
    
    
    <category term="hexo" scheme="http://nontech.top/tags/hexo/"/>
    
    <category term="hexo-asset-image" scheme="http://nontech.top/tags/hexo-asset-image/"/>
    
    <category term="hexo 插入图片" scheme="http://nontech.top/tags/hexo-%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>windows-右键-打开方式-添加应用程序</title>
    <link href="http://nontech.top/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://nontech.top/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-02-23T01:27:21.000Z</published>
    <updated>2021-03-01T06:07:27.962Z</updated>
    
    <content type="html"><![CDATA[<p><em>一个小技巧</em></p><a id="more"></a><h3 id="打开-regedit"><a href="#打开-regedit" class="headerlink" title="打开 regedit"></a>打开 regedit</h3><pre><code>win + r -&gt; 输入 “regedit”</code></pre><img src="/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/regedit.jpg" class title="open regedit"><h3 id="进入-HKEY-CLASSES-ROOT-gt-gt-shell"><a href="#进入-HKEY-CLASSES-ROOT-gt-gt-shell" class="headerlink" title="进入 HKEY_CLASSES_ROOT -&gt; * -&gt; shell"></a>进入 HKEY_CLASSES_ROOT -&gt; * -&gt; shell</h3><img src="/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/shell.jpg" class title="进入 shell 文件夹"><h3 id="shell-上右键-gt-新建-gt-项"><a href="#shell-上右键-gt-新建-gt-项" class="headerlink" title="shell 上右键 -&gt; 新建 -&gt; 项"></a>shell 上右键 -&gt; 新建 -&gt; 项</h3><img src="/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/new-option.jpg" class title="新建项"><p>并输入名称（如 “EditPlus”）</p><h3 id="再新建项，并命名为-“command”"><a href="#再新建项，并命名为-“command”" class="headerlink" title="再新建项，并命名为 “command”"></a>再新建项，并命名为 “command”</h3><img src="/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/new-command.jpg" class title="新建项"><p>并双击右侧 “默认” 图标</p><h3 id="编辑-默认项"><a href="#编辑-默认项" class="headerlink" title="编辑 默认项"></a>编辑 默认项</h3><img src="/2021/02/23/windows-%E5%8F%B3%E9%94%AE-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F-%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/edit-moren.jpg" class title="编辑字符串"><p>将应用程序的路径复制过来，注意要在路径后面加上应用程序名称，例如：\EditPlus.exe。最后，在路径和名称后面加上”空格”和”%1”。<br>例如：E:\Program_Files\EditPlus\EditPlus.exe 1%</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;一个小技巧&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="系统" scheme="http://nontech.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="小窍门" scheme="http://nontech.top/tags/%E5%B0%8F%E7%AA%8D%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>centos7 v2ray 一键安装</title>
    <link href="http://nontech.top/2021/02/13/centos7-v2ray-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/"/>
    <id>http://nontech.top/2021/02/13/centos7-v2ray-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/</id>
    <published>2021-02-13T08:48:26.000Z</published>
    <updated>2021-02-23T08:55:35.740Z</updated>
    
    <content type="html"><![CDATA[<p>搞个便宜 vps，研究一下 v2ray，发现大家都在一键搞定，所以也来膜拜一下大神。</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>1.准备好curl;</p><pre><code>yum update -y &amp;&amp; yum install curl -y</code></pre><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><pre><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre><p>然后选择 ‘1’ 回车，可以都使用默认设置，默认TCP传输协议，端口也可使用默认的；<br>如果需要shadowsocks，要选择 ‘Y’，然后配置端口，密码，加密协议，可以全部默认；<br>回车，等待安装完成。</p><p>可以直接复制粘贴二维码链接，扫码节省配置步骤</p><h2 id="管理-V2RAY"><a href="#管理-V2RAY" class="headerlink" title="管理 V2RAY"></a>管理 V2RAY</h2><pre><code>v2ray info 查看 V2Ray 配置信息v2ray config 修改 V2Ray 配置v2ray link 生成 V2Ray 配置文件链接v2ray infolink 生成 V2Ray 配置信息链接v2ray qr 生成 V2Ray 配置二维码链接v2ray ss 修改 Shadowsocks 配置v2ray ssinfo 查看 Shadowsocks 配置信息v2ray ssqr 生成 Shadowsocks 配置二维码链接v2ray status 查看 V2Ray 运行状态v2ray start 启动 V2Rayv2ray stop 停止 V2Rayv2ray restart 重启 V2Rayv2ray log 查看 V2Ray 运行日志v2ray update 更新 V2Rayv2ray update.sh 更新 V2Ray 管理脚本v2ray uninstall 卸载 V2Ray</code></pre><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><p>~ 请记得查看防火墙是否开启，并开放相应端口<br>~ 记得调整服务器时间与本地时间相同，否则 v2ray 校验不通过</p><p><em>参考链接：<a href="https://x.usbfu.com/%E5%AE%89%E8%A3%85-v2ray/">https://x.usbfu.com/%E5%AE%89%E8%A3%85-v2ray/</a></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搞个便宜 vps，研究一下 v2ray，发现大家都在一键搞定，所以也来膜拜一下大神。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="网络技术" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="http://nontech.top/tags/Linux/"/>
    
    <category term="v2ray" scheme="http://nontech.top/tags/v2ray/"/>
    
    <category term="一键安装" scheme="http://nontech.top/tags/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos7-nginx-setup</title>
    <link href="http://nontech.top/2021/02/12/centos7-nginx-setup/"/>
    <id>http://nontech.top/2021/02/12/centos7-nginx-setup/</id>
    <published>2021-02-12T10:04:22.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>在爬楼安装 nginx 的过程中，遇到了不少问题，记录于此，已备不时之需</em></p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="下载-nginx-源码"><a href="#下载-nginx-源码" class="headerlink" title="下载 nginx 源码"></a>下载 nginx 源码</h3><pre><code>进入目标路径，例如 /usr/localyum install -y wgetwget http://nginx.org/download/nginx-1.9.9.tar.gz</code></pre><h3 id="检查-安装-gcc-编译器"><a href="#检查-安装-gcc-编译器" class="headerlink" title="检查/安装 gcc(编译器)"></a>检查/安装 gcc(编译器)</h3><pre><code>gcc -vyum -y install gcc</code></pre><h3 id="安装-pcre、pcre-devel-（为什么安装俩？）"><a href="#安装-pcre、pcre-devel-（为什么安装俩？）" class="headerlink" title="安装 pcre、pcre-devel （为什么安装俩？）"></a>安装 pcre、pcre-devel （为什么安装俩？）</h3><pre><code>yum install -y pcre pcre-devel</code></pre><p>pcre 是一个 perl 库，包括 perl 兼容的正则表达式库，nginx 的 http 模块使用 pcre 来解析正则表达式</p><h3 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h3><pre><code>yum install -y zlib zlib-devel</code></pre><p>zlib 库提供了很多种压缩和解压缩方式，nginx 使用 zlib 对 http 包的内容进行 gzip</p><h3 id="安装-openssl"><a href="#安装-openssl" class="headerlink" title="安装 openssl"></a>安装 openssl</h3><pre><code>yum install -y openssl openssl-devel</code></pre><p>openssl是web安全通信的基石，大神说禁止裸奔</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><h3 id="解压-nginx"><a href="#解压-nginx" class="headerlink" title="解压 nginx"></a>解压 nginx</h3><pre><code>tar -zxvf  nginx-1.9.9.tar.gz并进入 nginx-1.9.9</code></pre><h3 id="make-nginx"><a href="#make-nginx" class="headerlink" title="make nginx"></a>make nginx</h3><p>~ 执行 ./configure, 如果有需要的模块，跟在后面，例如：</p><pre><code>./configure --with-http_image_filter_module</code></pre><p>可能会报错，关于 GD 的，那么需要执行下面的语句，再执行 ./configure –xxx</p><pre><code>yum install -y gd gd-devel</code></pre><p>~ 依次执行 make，make install</p><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><p>查看 /usr/local/nginx/conf/nginx.conf，80端口是否配置；<br>进入 /usr/local/nginx/sbin 目录，执行命令启动nginx, 并查看是否成功:</p><pre><code>./nginxps -ef | grep nginx</code></pre><h3 id="访问服务器IP"><a href="#访问服务器IP" class="headerlink" title="访问服务器IP"></a>访问服务器IP</h3><pre><code>出现： Welcom to nginx 页面</code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>因为经常要执行 nginx 命令，每次都进入 nginx 文件夹很不方便，因此配置环境变量会方便些，执行</p><pre><code>vim /etc/profile</code></pre><p>在末尾添加两条语句：</p><pre><code>PATH=$PATH:/usr/local/nginx/sbinexport PATH</code></pre><p>保存退出后，需要执行一条语句使修改生效：</p><pre><code>source /etc/profile</code></pre><p>此后执行命令会方便很多，如：</p><pre><code>nginx -tnginx -s reloadnginx -s stop</code></pre><h2 id="配置服务（规范启停服务操作）"><a href="#配置服务（规范启停服务操作）" class="headerlink" title="配置服务（规范启停服务操作）"></a>配置服务（规范启停服务操作）</h2><p>新建并编辑服务文件：</p><pre><code>vim /usr/lib/systemd/system/nginx.service内容如下：[Unit]Description=nginx - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true[Install]WantedBy=multi-user.target</code></pre><p>保存退出（我试了，停止不了，也许我哪里搞得不对，慢慢再看了）</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p><em>参考链接：<a href="https://blog.csdn.net/qq_37345604/article/details/90034424">https://blog.csdn.net/qq_37345604/article/details/90034424</a></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;在爬楼安装 nginx 的过程中，遇到了不少问题，记录于此，已备不时之需&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="网络技术" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    <category term="nginx" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/nginx/"/>
    
    
    <category term="Linux" scheme="http://nontech.top/tags/Linux/"/>
    
    <category term="nginx" scheme="http://nontech.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>git 子模块 submodule 添加-使用-删除</title>
    <link href="http://nontech.top/2021/02/06/git-%E5%AD%90%E6%A8%A1%E5%9D%97-submodule-%E6%B7%BB%E5%8A%A0-%E4%BD%BF%E7%94%A8-%E5%88%A0%E9%99%A4/"/>
    <id>http://nontech.top/2021/02/06/git-%E5%AD%90%E6%A8%A1%E5%9D%97-submodule-%E6%B7%BB%E5%8A%A0-%E4%BD%BF%E7%94%A8-%E5%88%A0%E9%99%A4/</id>
    <published>2021-02-06T02:30:52.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>刚开始搞blog，使用 hexo 的 next 模板的时候，直接从github上拉了代码，这样在我的仓库下面就有了另外一个仓库。为了能尽量避坑，搜索了一些前人的经验，记录于此。</em></p><a id="more"></a><h2 id="子模块添加"><a href="#子模块添加" class="headerlink" title="子模块添加"></a>子模块添加</h2><p>执行如下命令：</p><pre><code>git submodule add https://github.com/next-theme/hexo-theme-next.git &lt;yourpath/modulename&gt;</code></pre><p>例：</p><pre><code>git submodule add https://github.com/next-theme/hexo-theme-next.git themes/hexo-theme-next/</code></pre><p>就会生成以下文件：</p><pre><code>/.gitmodules/yourpath/.git/modules/&lt;modulename&gt;(不知道为啥第二次我这里没有生成)</code></pre><p>影响以下文件：</p><pre><code>/.git/config文件会增加 submodule 的条目</code></pre><p>查看修改内容即可看到上述修改:</p><pre><code>git diff --cached</code></pre><p>提交以完成添加：</p><pre><code>git commit</code></pre><h2 id="子模块使用"><a href="#子模块使用" class="headerlink" title="子模块使用"></a>子模块使用</h2><p>如果是自己新建的子模块这时路径下还没有代码，需要初始化：</p><pre><code>git submodule initgit submodule update</code></pre><p>如果是用别人的仓库，这时应该就已经有了代码。</p><h2 id="子模块的更新"><a href="#子模块的更新" class="headerlink" title="子模块的更新"></a>子模块的更新</h2><p>子模块的维护者提交更新后，我们要自己去手动获取更新，在父仓库目录：</p><h3 id="PULL"><a href="#PULL" class="headerlink" title="PULL"></a>PULL</h3><p>更新别人加的 submodule：</p><pre><code>git pullgit submodule initgit submodule update</code></pre><p>更新某个 submodule：</p><pre><code>git submodule update -- &lt;path&gt;</code></pre><p>一次更新全部：</p><pre><code>git submodule foreach git pull origin master</code></pre><h3 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h3><p>~ 先在 submodule 的目录下 push (单独更新 submodule)<br>~ 然后在父仓库的目录下 push (更新父仓库的 submodule)</p><h2 id="子模块的删除"><a href="#子模块的删除" class="headerlink" title="子模块的删除"></a>子模块的删除</h2><p>这个过程有点麻烦，要分别删除添加子模块时生成的那些</p><p>~ 删除子模块目录及源码；</p><p>~ 删除 /.gitmodules 文件中目标子模块相关条目；</p><p>~ 删除 /.git/config 中目标子模块相关条目；</p><p>~ 删除 /.git/modules/ 目标子模块目录，每个子模块对应一个目录。</p><h4 id="最后，请记得清除缓存"><a href="#最后，请记得清除缓存" class="headerlink" title="最后，请记得清除缓存"></a><em>最后，请记得清除缓存</em></h4><pre><code>git rm --cached 子模块名称</code></pre><p>完成删除后，提交到仓库即可</p><pre><code>git commit</code></pre><p>Tips: <em>这样做应该有一些好处，我还没学到，随后更新吧。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;刚开始搞blog，使用 hexo 的 next 模板的时候，直接从github上拉了代码，这样在我的仓库下面就有了另外一个仓库。为了能尽量避坑，搜索了一些前人的经验，记录于此。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="git" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/git/"/>
    
    
    <category term="git" scheme="http://nontech.top/tags/git/"/>
    
    <category term="git子模块" scheme="http://nontech.top/tags/git%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    
    <category term="submodule" scheme="http://nontech.top/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>centos7-certbot-python2-版本坑</title>
    <link href="http://nontech.top/2021/02/03/centos7-certbot-python2-%E7%89%88%E6%9C%AC%E5%9D%91/"/>
    <id>http://nontech.top/2021/02/03/centos7-certbot-python2-%E7%89%88%E6%9C%AC%E5%9D%91/</id>
    <published>2021-02-03T02:46:17.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>centos7 系统，默认装的 python2，后来又装了python3</em><br><em>使用了 pip，默认包都是给python3用的，python2 的包一直没有更新</em><br><em>在使用 Let’s Ecrypt 生成SSL证书时，遇到了版本不兼容的坑</em></p><a id="more"></a><p>首先 yum install certbot, yum 源中没有certbot，执行如下命令：</p><pre><code>yum --enablerepo=extras install epel-release</code></pre><p>提示没有命令： yum-config-manager。 百度搜到要执行以下命令先：</p><pre><code>yum -y install yum-utils</code></pre><p>然后更新 yum </p><pre><code>yum -y upgrade</code></pre><p>之后安装 certbot-nginx (听别人说要用这个)</p><pre><code>yum install certbot-nginx</code></pre><p>以为到这里万事大吉，结果在执行以下命令时：</p><p>certbot certonly –webroot -w /usr/local/nginx/html/ -d sub.domain.com -m <a href="mailto:&#120;&#x78;&#120;&#120;&#x78;&#x78;&#64;&#120;&#x78;&#x78;&#x2e;&#99;&#x6f;&#109;">&#120;&#x78;&#120;&#120;&#x78;&#x78;&#64;&#120;&#x78;&#x78;&#x2e;&#99;&#x6f;&#109;</a> –agree-tos</p><p>报错：<br>    ……<br>    from_buffer() cannot return the address of the raw string within a str or unicode or bytearray object<br>    ……</p><p>搜索了好多，结果就是版本不匹配的问题，然后就各种升级，因为pip默认使用了python3的包路径，而certbot使用的python2，所以刚开始用 pip 对 pyOpenSSL, cffi, cryptography 等用到的包升级，都没有发生影响。后来别人告诉我要使用这样的命令：</p><pre><code>python -m pip ......</code></pre><p>于是我执行了：</p><pre><code>python -m pip install --upgrade cryptography</code></pre><p>结果告诉我不能升级，什么报错忘记了，然后执行了这条：</p><pre><code>python -m pip install --upgrade pyOpenSSL --ignore-installed pyOpenSSL</code></pre><p>结果其他几个用到的包也一并升级了。</p><p>最后还遇到了一个小坑，更新了一下：</p><pre><code>python -m pip install --update urllib3</code></pre><p><strong>总结：</strong><br><strong>在填坑过程中，一定要仔细查看错误日志，很多细节的地方其实已经明示暗示多次，否则白白浪费时间</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;centos7 系统，默认装的 python2，后来又装了python3&lt;/em&gt;&lt;br&gt;&lt;em&gt;使用了 pip，默认包都是给python3用的，python2 的包一直没有更新&lt;/em&gt;&lt;br&gt;&lt;em&gt;在使用 Let’s Ecrypt 生成SSL证书时，遇到了版本不兼容的坑&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://nontech.top/tags/Linux/"/>
    
    <category term="python2" scheme="http://nontech.top/tags/python2/"/>
    
  </entry>
  
  <entry>
    <title>centos7 let&#39;s encrypt</title>
    <link href="http://nontech.top/2021/02/02/centos7-let-s-encrypt/"/>
    <id>http://nontech.top/2021/02/02/centos7-let-s-encrypt/</id>
    <published>2021-02-02T03:17:21.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载于：<a href="https://my.oschina.net/u/174201/blog/1577784">https://my.oschina.net/u/174201/blog/1577784</a></em><br><strong>感谢大神</strong></p><a id="more"></a><h2 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h2><p>如果要启用 HTTPS，我们需要一个 CA 证书，Let’s Encrypt 是一个免费的证书颁发机构，由 ISRG（Internet Security Research Group）运作。</p><h2 id="使用-Certbot-获取证书"><a href="#使用-Certbot-获取证书" class="headerlink" title="使用 Certbot 获取证书"></a>使用 Certbot 获取证书</h2><p>Certbot 是 Let’s Encrypt 官方推荐的证书获取工具，它可以帮助很方便的获取和更新 Let’s Encrypt 证书，Certbot 支持所有 Unix 内核的操作系统。</p><h2 id="安装-Certbot-客户端"><a href="#安装-Certbot-客户端" class="headerlink" title="安装 Certbot 客户端"></a>安装 Certbot 客户端</h2><pre><code>yum install -y epel-releaseyum install -y certbot</code></pre><p>注： 安装和执行 certbot 过程中，可能会报一些错误，这些错误主要是使用到的一些 python 库版本不匹配问题，根据错误提示更新安装相应版本的库即可。</p><p><em>如果遇到问题，可以参考我的这篇文章：centos7-certbot-python2-版本坑</em></p><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>因为使用 Certbot 获取证书时，Let’s Encrypt 服务器会访问 <a href="http://sub.domain.com/.well-known">http://sub.domain.com/.well-known</a> 来验证你的域名服务器，因此需要修改 nginx 配置文件，配置 .well-known 指向本地一个目录：</p><pre><code>server &#123;    ......    location /.well-known &#123;        alias /usr/local/nginx/html/.well-known;    &#125;    ......&#125;</code></pre><p>然后就可以使用 certbot 命令来获取证书了，获取证书时需要输入你的Email并接受用户条款。需要注意：-w 指定的 web 目录需要和前边 nginx 配置的 .well-known 的本地目录一致（/usr/local/nginx/html）：</p><pre><code>certbot certonly --webroot -w /usr/local/nginx/html/ -d sub.domain.com -m xxxxxx@xxx.com --agree-tos-w 指定 webroot 目录-d domain 想要获取的证书域名，支持多个域名</code></pre><p>但是有些时候我们的一些服务并没有根目录，例如一些微服务，这时候使用 –webroot 就走不通了。certbot 还有另外一种模式 –standalone，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如nginx）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。<br>    certbot certonly –standalone -d sub.domain.com -m <a href="mailto:&#x78;&#x78;&#120;&#x78;&#120;&#x78;&#x40;&#120;&#120;&#x78;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#x78;&#120;&#x78;&#120;&#x78;&#x40;&#120;&#120;&#x78;&#x2e;&#x63;&#x6f;&#109;</a> –agree-tos</p><p>如果成功获取证书，你的密钥和证书存放在 /etc/letsencrypt/live/sub.domain.com/ 目录：</p><pre><code>ll /etc/letsencrypt/live/sub.domain.com/cert.pem -&gt; ../../archive/sub.domain.com/cert1.pemchain.pem -&gt; ../../archive/sub.domain.com/chain1.pemfullchain.pem -&gt; ../../archive/sub.domain.com/fullchain1.pemprivkey.pem -&gt; ../../archive/sub.domain.com/privkey1.pem</code></pre><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>cert.pem</td><td>服务端证书</td></tr><tr><td>chain.pem</td><td>浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</td></tr><tr><td>fullchain.pem</td><td>包括了cert.pem和chain.pem的内容</td></tr><tr><td>privkey.pem</td><td>证书的私钥</td></tr></tbody></table><h2 id="删除证书"><a href="#删除证书" class="headerlink" title="删除证书"></a>删除证书</h2><p>有时需要删除已生成的证书，重新生成。可使用如下命令进行删除：</p><pre><code>certbot delete --cert-name sub.domain.com</code></pre><h2 id="生成-dhparam"><a href="#生成-dhparam" class="headerlink" title="生成 dhparam"></a>生成 dhparam</h2><p>nginx 配置 https 时，需要 dhparam，使用如下命令进行生成：</p><pre><code>openssl dhparam -out /etc/nginx/sites-enabled/dh4096.pem 4096</code></pre><h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><pre><code>server &#123;    listen 80;    server_name sub.domain.com;    rewrite ^ https://$server_name$request_uri? permanent;&#125;server &#123;    listen 443 ssl;    server_name sub.domain.com;    include /etc/nginx/sites-enabled/sub.domain.com.ssl;    location / &#123; try_files $uri @proxy_to_app; &#125;    location @proxy_to_app &#123;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header X-Forwarded-Proto https;        proxy_redirect off;        proxy_pass http://127.0.0.1:8080;    &#125;&#125;</code></pre><p>sub.domain.com.ssl 文件配置内容：</p><pre><code>ssl on;ssl_certificate /etc/letsencrypt/live/sub.domain.com/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/sub.domain.com/privkey.pem;ssl_prefer_server_ciphers on;ssl_dhparam /etc/nginx/sites-enabled/dhparam.pem;ssl_ciphers HIGH:!ADH:!MD5:!aNULL:!eNULL:!MEDIUM:!LOW:!EXP:!kEDH;ssl_protocols TLSv1.2 TLSv1.1 TLSv1;ssl_session_timeout 1d;ssl_session_cache shared:SSL:50m;ssl_stapling on;ssl_stapling_verify on;add_header Strict-Transport-Security max-age=15768000;</code></pre><h3 id="配置-tomcat"><a href="#配置-tomcat" class="headerlink" title="配置 tomcat"></a>配置 tomcat</h3><p>配置 tomcat 支持 https，有两处需要修改：<br>　～在 Connector 节点增加 proxyPort=”443”</p><pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    connectionTimeout=&quot;20000&quot;    redirectPort=&quot;8443&quot; proxyPort=&quot;443&quot; /&gt;</code></pre><p>　～添加如下 Value 节点</p><pre><code>&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;    remoteIpHeader=&quot;x-forwarded-for&quot;    remoteIpProxiesHeader=&quot;x-forwarded-by&quot;    protocolHeader=&quot;x-forwarded-proto&quot; /&gt;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="如果开启了防火墙，记得开放-443-端口"><a href="#如果开启了防火墙，记得开放-443-端口" class="headerlink" title="如果开启了防火墙，记得开放 443 端口"></a><em>如果开启了防火墙，记得开放 443 端口</em></h4><p>启动 nginx 或重新载入配置，使用浏览器打开 <a href="https://sub.domain.com/">https://sub.domain.com/</a></p><pre><code>service nginx reload</code></pre><p>可以使用在线工具 <a href="https://www.ssllabs.com/ssltest">https://www.ssllabs.com/ssltest</a> 来检测证书情况。</p><h3 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h3><p>Let’s Encrypt 证书只有 90 天有效期，我们需要在证书到期之前更新证书，certbot 提供了相应的命令: certbot renew。</p><pre><code>/usr/bin/certbot renew --dry-run</code></pre><p>可以将此更新命令添加到计划任务中，certbot renew 命令只会更新还有 30 天才会到期的证书，所以我们可以每隔 2 个月在凌晨3:30执行一次更新操作即可，创建一个新文件 certbot-auto-renew-cron，写入 cron 计划内容：</p><pre><code>30 3 * */2 * /usr/bin/certbot renew --post-hook &quot;service nginx restart&quot; --quiet &gt;&gt; /var/log/cerbot.log</code></pre><p>–pre-hook 这个参数表示执行更新操作之前要做的事情<br>–post-hook 这个参数表示执行更新操作完成后要做的事情</p><h3 id="启动-crontab-定时任务"><a href="#启动-crontab-定时任务" class="headerlink" title="启动 crontab 定时任务"></a>启动 crontab 定时任务</h3><pre><code>crontab certbot-auto-renew-cron</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;转载于：&lt;a href=&quot;https://my.oschina.net/u/174201/blog/1577784&quot;&gt;https://my.oschina.net/u/174201/blog/1577784&lt;/a&gt;&lt;/em&gt;&lt;br&gt;&lt;strong&gt;感谢大神&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://nontech.top/tags/Linux/"/>
    
    <category term="https" scheme="http://nontech.top/tags/https/"/>
    
    <category term="ssl证书" scheme="http://nontech.top/tags/ssl%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Vue 2-&gt;3 生命周期</title>
    <link href="http://nontech.top/2021/02/01/Vue-2-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://nontech.top/2021/02/01/Vue-2-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-02-01T08:56:21.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>最近了解了一下vue3，虽然连vue2都不太理解，记录一下也算是为自己打打气</em></p><a id="more"></a><p>Vue2——————–&gt;vue3</p><p>beforeCreate　　-&gt;　　setup()</p><p>created　　　　　-&gt;　　setup()</p><p>beforeMount　　　-&gt;　onBeforeMount</p><p>mounted　　　　　-&gt;　onMounted</p><p>beforeUpdate　　-&gt;　　onBeforeUpdate</p><p>updated　　　　　-&gt;　　onUpdated</p><p>beforeDestroy　　-&gt;　　onBeforeUnmount</p><p>destroyed　　　　-&gt;　　onUnmounted</p><p>activated　　　　-&gt;　　onActivated</p><p>deactivated　　　-&gt; 　onDeactivated</p><p>errorCaptured　　-&gt; 　onErrorCaptured</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;最近了解了一下vue3，虽然连vue2都不太理解，记录一下也算是为自己打打气&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="前端" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="vue3" scheme="http://nontech.top/tags/vue3/"/>
    
    <category term="vue3变更" scheme="http://nontech.top/tags/vue3%E5%8F%98%E6%9B%B4/"/>
    
  </entry>
  
  <entry>
    <title>firewalld-防火墙 - 搬运</title>
    <link href="http://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/"/>
    <id>http://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/</id>
    <published>2021-02-01T08:19:56.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<p><em>他山之玉，补己不足</em></p><a id="more"></a><h2 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h2><pre><code>//启动systemctl start firewalld//查看状态systemctl status firewalld//停止systemctl stop firewalld//开机启用systemctl enable firewalld//开机禁用systemctl disable firewalld</code></pre><h2 id="端口："><a href="#端口：" class="headerlink" title="端口："></a>端口：</h2><p>开放/关闭端口：</p><pre><code>// 开放firewall-cmd --zone=public --add-port=80/tcp --permanent//关闭firewall-cmd --zone= public --remove-port=80/tcp --permanent--permanent(加上是永久生效)//重载firewall-cmd --reload（新增之后一定要重载才生效）</code></pre><p>查看开放的服务和端口：</p><pre><code>firewall-cmd --list-servicesfirewall-cmd --zone=public --list-ports</code></pre><h2 id="firewalld-cmd其他操作："><a href="#firewalld-cmd其他操作：" class="headerlink" title="firewalld-cmd其他操作："></a>firewalld-cmd其他操作：</h2><pre><code>//查看版本firewall-cmd --version//查看帮助firewall-cmd --help//显示状态firewall-cmd --state//查看所有打开的端口firewall-cmd --zone=public --list-ports//更新防火墙规则firewall-cmd --reload//查看区域信息firewall-cmd --get-active-zones//查看指定接口所属区域firewall-cmd --get-zone-of-interface=eth0//拒绝所有包firewall-cmd --panic-on//取消拒绝状态firewall-cmd --panic-off//查看是否拒绝firewall-cmd --query-panic</code></pre><h2 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h2><ol><li>systemctl是CentOS7的主要服务管理工具，融合了service和chkconfig的功能。</li><li>经常本地好好的，到远程就不行，多半是防火墙或权限的问题。</li><li>尽量不要关闭防火墙，有问题还是解决问题优先。</li><li>firewalld 和 iptables 据说是很类似的东西，有机会研究下。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;他山之玉，补己不足&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    <category term="系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://nontech.top/tags/Linux/"/>
    
    <category term="firewalld" scheme="http://nontech.top/tags/firewalld/"/>
    
    <category term="防火墙" scheme="http://nontech.top/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
    <category term="命令" scheme="http://nontech.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Useful links</title>
    <link href="http://nontech.top/2021/01/30/A-useful-link-Classmate-Wang/"/>
    <id>http://nontech.top/2021/01/30/A-useful-link-Classmate-Wang/</id>
    <published>2021-01-30T09:26:03.000Z</published>
    <updated>2021-02-23T09:10:20.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些干货满满的博客"><a href="#一些干货满满的博客" class="headerlink" title="一些干货满满的博客"></a>一些干货满满的博客</h2><h3 id="博哥的blog-https-www-xublog-wang"><a href="#博哥的blog-https-www-xublog-wang" class="headerlink" title="博哥的blog: https://www.xublog.wang"></a>博哥的blog: <em><a href="https://www.xublog.wang/">https://www.xublog.wang</a></em></h3><h3 id="不错的书房：https-www-kanshuv-com"><a href="#不错的书房：https-www-kanshuv-com" class="headerlink" title="不错的书房：https://www.kanshuv.com"></a>不错的书房：<em><a href="https://www.kanshuv.com/">https://www.kanshuv.com</a></em></h3><h3 id="不错的影院：https-dianying4k-com"><a href="#不错的影院：https-dianying4k-com" class="headerlink" title="不错的影院：https://dianying4k.com"></a>不错的影院：<em><a href="https://dianying4k.com/">https://dianying4k.com</a></em></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些干货满满的博客&quot;&gt;&lt;a href=&quot;#一些干货满满的博客&quot; class=&quot;headerlink&quot; title=&quot;一些干货满满的博客&quot;&gt;&lt;/a&gt;一些干货满满的博客&lt;/h2&gt;&lt;h3 id=&quot;博哥的blog-https-www-xublog-wang&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="好看的电影" scheme="http://nontech.top/tags/%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
    
    <category term="好看的书" scheme="http://nontech.top/tags/%E5%A5%BD%E7%9C%8B%E7%9A%84%E4%B9%A6/"/>
    
    <category term="通透的知识" scheme="http://nontech.top/tags/%E9%80%9A%E9%80%8F%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
