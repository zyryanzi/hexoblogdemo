<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NON-TECH</title>
  
  <subtitle>非技术不存在</subtitle>
  <link href="http://nontech.top/atom.xml" rel="self"/>
  
  <link href="http://nontech.top/"/>
  <updated>2021-02-22T09:50:51.555Z</updated>
  <id>http://nontech.top/</id>
  
  <author>
    <name>Uray Chow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows-打开方式添加应用程序</title>
    <link href="http://nontech.top/2021/02/22/windows-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://nontech.top/2021/02/22/windows-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-02-22T09:50:51.000Z</published>
    <updated>2021-02-22T09:50:51.555Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>centos7 v2ray 一键安装</title>
    <link href="http://nontech.top/2021/02/13/centos7-v2ray-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/"/>
    <id>http://nontech.top/2021/02/13/centos7-v2ray-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85/</id>
    <published>2021-02-13T08:48:26.000Z</published>
    <updated>2021-02-22T08:27:22.378Z</updated>
    
    <content type="html"><![CDATA[<p>搞个便宜 vps，研究一下 v2ray，发现大家都在一键搞定，所以也来膜拜一下大神。</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>1.准备好curl;</p><pre><code>yum update -y &amp;&amp; yum install curl -y</code></pre><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><pre><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre><p>然后选择 ‘1’ 回车，可以都使用默认设置，默认TCP传输协议，端口也可使用默认的；<br>如果需要shadowsocks，要选择 ‘Y’，然后配置端口，密码，加密协议，可以全部默认；<br>回车，等待安装完成。</p><p>可以直接复制粘贴二维码链接，扫码节省配置步骤</p><h2 id="管理-V2RAY"><a href="#管理-V2RAY" class="headerlink" title="管理 V2RAY"></a>管理 V2RAY</h2><pre><code>v2ray info 查看 V2Ray 配置信息v2ray config 修改 V2Ray 配置v2ray link 生成 V2Ray 配置文件链接v2ray infolink 生成 V2Ray 配置信息链接v2ray qr 生成 V2Ray 配置二维码链接v2ray ss 修改 Shadowsocks 配置v2ray ssinfo 查看 Shadowsocks 配置信息v2ray ssqr 生成 Shadowsocks 配置二维码链接v2ray status 查看 V2Ray 运行状态v2ray start 启动 V2Rayv2ray stop 停止 V2Rayv2ray restart 重启 V2Rayv2ray log 查看 V2Ray 运行日志v2ray update 更新 V2Rayv2ray update.sh 更新 V2Ray 管理脚本v2ray uninstall 卸载 V2Ray</code></pre><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><p>~ 请记得查看防火墙是否开启，并开放相应端口<br>~ 记得调整服务器时间与本地时间相同，否则 v2ray 校验不通过</p><p><em>参考链接：<a href="https://x.usbfu.com/%E5%AE%89%E8%A3%85-v2ray/">https://x.usbfu.com/%E5%AE%89%E8%A3%85-v2ray/</a></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搞个便宜 vps，研究一下 v2ray，发现大家都在一键搞定，所以也来膜拜一下大神。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学 - 网络技术" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ready-go" scheme="http://nontech.top/tags/ready-go/"/>
    
  </entry>
  
  <entry>
    <title>centos7-nginx-setup</title>
    <link href="http://nontech.top/2021/02/12/centos7-nginx-setup/"/>
    <id>http://nontech.top/2021/02/12/centos7-nginx-setup/</id>
    <published>2021-02-12T10:04:22.000Z</published>
    <updated>2021-02-22T08:26:51.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="下载-nginx-源码"><a href="#下载-nginx-源码" class="headerlink" title="下载 nginx 源码"></a>下载 nginx 源码</h3><pre><code>进入目标路径，例如 /usr/localyum install -y wgetwget http://nginx.org/download/nginx-1.9.9.tar.gz</code></pre><a id="more"></a><h3 id="检查-安装-gcc-编译器"><a href="#检查-安装-gcc-编译器" class="headerlink" title="检查/安装 gcc(编译器)"></a>检查/安装 gcc(编译器)</h3><pre><code>gcc -vyum -y install gcc</code></pre><h3 id="安装-pcre、pcre-devel-（为什么安装俩？）"><a href="#安装-pcre、pcre-devel-（为什么安装俩？）" class="headerlink" title="安装 pcre、pcre-devel （为什么安装俩？）"></a>安装 pcre、pcre-devel （为什么安装俩？）</h3><pre><code>yum install -y pcre pcre-devel</code></pre><p>pcre 是一个 perl 库，包括 perl 兼容的正则表达式库，nginx 的 http 模块使用 pcre 来解析正则表达式</p><h3 id="安装-zlib"><a href="#安装-zlib" class="headerlink" title="安装 zlib"></a>安装 zlib</h3><pre><code>yum install -y zlib zlib-devel</code></pre><p>zlib 库提供了很多种压缩和解压缩方式，nginx 使用 zlib 对 http 包的内容进行 gzip</p><h3 id="安装-openssl"><a href="#安装-openssl" class="headerlink" title="安装 openssl"></a>安装 openssl</h3><pre><code>yum install -y openssl openssl-devel</code></pre><p>openssl是web安全通信的基石，大神说禁止裸奔</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><h3 id="解压-nginx"><a href="#解压-nginx" class="headerlink" title="解压 nginx"></a>解压 nginx</h3><pre><code>tar -zxvf  nginx-1.9.9.tar.gz并进入 nginx-1.9.9</code></pre><h3 id="make-nginx"><a href="#make-nginx" class="headerlink" title="make nginx"></a>make nginx</h3><p>~ 执行 ./configure, 如果有需要的模块，跟在后面，例如：</p><pre><code>./configure --with-http_image_filter_module</code></pre><p>可能会报错，关于 GD 的，那么需要执行下面的语句，再执行 ./configure –xxx</p><pre><code>yum install -y gd gd-devel</code></pre><p>~ 依次执行 make，make install</p><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><p>查看 /usr/local/nginx/conf/nginx.conf，80端口是否配置；<br>进入 /usr/local/nginx/sbin 目录，执行命令启动nginx, 并查看是否成功:</p><pre><code>./nginxps -ef | grep nginx</code></pre><h3 id="访问服务器IP"><a href="#访问服务器IP" class="headerlink" title="访问服务器IP"></a>访问服务器IP</h3><pre><code>出现： Welcom to nginx 页面</code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>因为经常要执行 nginx 命令，每次都进入 nginx 文件夹很不方便，因此配置环境变量会方便些，执行</p><pre><code>vim /etc/profile</code></pre><p>在末尾添加两条语句：</p><pre><code>PATH=$PATH:/usr/local/nginx/sbinexport PATH</code></pre><p>保存退出后，需要执行一条语句使修改生效：</p><pre><code>source /etc/profile</code></pre><p>此后执行命令会方便很多，如：</p><pre><code>nginx -tnginx -s reloadnginx -s stop</code></pre><h2 id="配置服务（规范启停服务操作）"><a href="#配置服务（规范启停服务操作）" class="headerlink" title="配置服务（规范启停服务操作）"></a>配置服务（规范启停服务操作）</h2><p>新建并编辑服务文件：</p><pre><code>vim /usr/lib/systemd/system/nginx.service内容如下：[Unit]Description=nginx - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true[Install]WantedBy=multi-user.target</code></pre><p>保存退出（我试了，停止不了，也许我哪里搞得不对，慢慢再看了）</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p><em>参考链接：<a href="https://blog.csdn.net/qq_37345604/article/details/90034424">https://blog.csdn.net/qq_37345604/article/details/90034424</a></em></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h2&gt;&lt;h3 id=&quot;下载-nginx-源码&quot;&gt;&lt;a href=&quot;#下载-nginx-源码&quot; class=&quot;headerlink&quot; title=&quot;下载 nginx 源码&quot;&gt;&lt;/a&gt;下载 nginx 源码&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;进入目标路径，例如 /usr/local
yum install -y wget
wget http://nginx.org/download/nginx-1.9.9.tar.gz
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="计算机科学 - nginx" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-nginx/"/>
    
    
    <category term="ready-go" scheme="http://nontech.top/tags/ready-go/"/>
    
  </entry>
  
  <entry>
    <title>git 子模块 submodule 添加-使用-删除</title>
    <link href="http://nontech.top/2021/02/06/git-%E5%AD%90%E6%A8%A1%E5%9D%97-submodule-%E6%B7%BB%E5%8A%A0-%E4%BD%BF%E7%94%A8-%E5%88%A0%E9%99%A4/"/>
    <id>http://nontech.top/2021/02/06/git-%E5%AD%90%E6%A8%A1%E5%9D%97-submodule-%E6%B7%BB%E5%8A%A0-%E4%BD%BF%E7%94%A8-%E5%88%A0%E9%99%A4/</id>
    <published>2021-02-06T02:30:52.000Z</published>
    <updated>2021-02-22T08:24:07.433Z</updated>
    
    <content type="html"><![CDATA[<p><strong>刚开始搞blog，使用 hexo 的 next 模板的时候，直接从github上拉了代码，这样在我的仓库下面就有了另外一个仓库。为了能尽量避坑，搜索了一些前人的经验，记录于此。</strong></p><a id="more"></a><h2 id="子模块添加"><a href="#子模块添加" class="headerlink" title="子模块添加"></a>子模块添加</h2><p>执行如下命令：</p><pre><code>git submodule add https://github.com/next-theme/hexo-theme-next.git &lt;yourpath/modulename&gt;</code></pre><p>例：</p><pre><code>git submodule add https://github.com/next-theme/hexo-theme-next.git themes/hexo-theme-next/</code></pre><p>就会生成以下文件：</p><pre><code>/.gitmodules/yourpath/.git/modules/&lt;modulename&gt;(不知道为啥第二次我这里没有生成)</code></pre><p>影响以下文件：</p><pre><code>/.git/config文件会增加 submodule 的条目</code></pre><p>查看修改内容即可看到上述修改:</p><pre><code>git diff --cached</code></pre><p>提交以完成添加：</p><pre><code>git commit</code></pre><h2 id="子模块使用"><a href="#子模块使用" class="headerlink" title="子模块使用"></a>子模块使用</h2><p>如果是自己新建的子模块这时路径下还没有代码，需要初始化：</p><pre><code>git submodule initgit submodule update</code></pre><p>如果是用别人的仓库，这时应该就已经有了代码。</p><h2 id="子模块的更新"><a href="#子模块的更新" class="headerlink" title="子模块的更新"></a>子模块的更新</h2><p>子模块的维护者提交更新后，我们要自己去手动获取更新，在父仓库目录：</p><h3 id="PULL"><a href="#PULL" class="headerlink" title="PULL"></a>PULL</h3><p>更新别人加的 submodule：</p><pre><code>git pullgit submodule initgit submodule update</code></pre><p>更新某个 submodule：</p><pre><code>git submodule update -- &lt;path&gt;</code></pre><p>一次更新全部：</p><pre><code>git submodule foreach git pull origin master</code></pre><h3 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h3><p>~ 先在 submodule 的目录下 push (单独更新 submodule)<br>~ 然后在父仓库的目录下 push (更新父仓库的 submodule)</p><h2 id="子模块的删除"><a href="#子模块的删除" class="headerlink" title="子模块的删除"></a>子模块的删除</h2><p>这个过程有点麻烦，要分别删除添加子模块时生成的那些</p><p>~ 删除子模块目录及源码；</p><p>~ 删除 /.gitmodules 文件中目标子模块相关条目；</p><p>~ 删除 /.git/config 中目标子模块相关条目；</p><p>~ 删除 /.git/modules/ 目标子模块目录，每个子模块对应一个目录。</p><h4 id="最后，请记得清除缓存"><a href="#最后，请记得清除缓存" class="headerlink" title="最后，请记得清除缓存"></a><em>最后，请记得清除缓存</em></h4><pre><code>git rm --cached 子模块名称</code></pre><p>完成删除后，提交到仓库即可</p><pre><code>git commit</code></pre><p>Tips: <em>这样做应该有一些好处，我还没学到，随后更新吧。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;刚开始搞blog，使用 hexo 的 next 模板的时候，直接从github上拉了代码，这样在我的仓库下面就有了另外一个仓库。为了能尽量避坑，搜索了一些前人的经验，记录于此。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学 - git" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-git/"/>
    
    
    <category term="ready-go" scheme="http://nontech.top/tags/ready-go/"/>
    
  </entry>
  
  <entry>
    <title>centos7-certbot-python2-版本坑</title>
    <link href="http://nontech.top/2021/02/03/centos7-certbot-python2-%E7%89%88%E6%9C%AC%E5%9D%91/"/>
    <id>http://nontech.top/2021/02/03/centos7-certbot-python2-%E7%89%88%E6%9C%AC%E5%9D%91/</id>
    <published>2021-02-03T02:46:17.000Z</published>
    <updated>2021-02-22T08:25:08.057Z</updated>
    
    <content type="html"><![CDATA[<p><strong>centos7 系统</strong><br><strong>很多年前装的 python2 ；后来又装了python3 ；再后来使用了 pip ，默认包都是给python3用的</strong><br><strong>python2 的包一直没有更新</strong><br><strong>在使用 Let’s Ecrypt 生成SSL证书时，遇到了版本不兼容的坑</strong></p><a id="more"></a><p>首先 yum install certbot, yum 源中没有certbot，执行如下命令：</p><pre><code>yum --enablerepo=extras install epel-release</code></pre><p>提示没有命令： yum-config-manager。 百度搜到要执行以下命令先：</p><pre><code>yum -y install yum-utils</code></pre><p>然后更新 yum </p><pre><code>yum -y upgrade</code></pre><p>之后安装 certbot-nginx (听别人说要用这个)</p><pre><code>yum install certbot-nginx</code></pre><p>以为到这里万事大吉，结果在执行以下命令时：</p><p>certbot certonly –webroot -w /usr/local/nginx/html/ -d sub.domain.com -m <a href="mailto:&#120;&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#120;&#x78;&#x78;&#46;&#99;&#111;&#109;">&#120;&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#120;&#x78;&#x78;&#46;&#99;&#111;&#109;</a> –agree-tos</p><p>报错：<br>    ……<br>    from_buffer() cannot return the address of the raw string within a str or unicode or bytearray object<br>    ……</p><p>搜索了好多，结果就是版本不匹配的问题，然后就各种升级，因为pip默认使用了python3的包路径，而certbot使用的python2，所以刚开始用 pip 对 pyOpenSSL, cffi, cryptography 等用到的包升级，都没有发生影响。后来别人告诉我要使用这样的命令：</p><pre><code>python -m pip ......</code></pre><p>于是我执行了：</p><pre><code>python -m pip install --upgrade cryptography</code></pre><p>结果告诉我不能升级，什么报错忘记了，然后执行了这条：</p><pre><code>python -m pip install --upgrade pyOpenSSL --ignore-installed pyOpenSSL</code></pre><p>结果其他几个用到的包也一并升级了。</p><p>最后还遇到了一个小坑，更新了一下：</p><pre><code>python -m pip install --update urllib3</code></pre><p><strong>总结：</strong><br><strong>在填坑过程中，一定要仔细查看错误日志，很多细节的地方其实已经明示暗示多次，否则白白浪费时间</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;centos7 系统&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;很多年前装的 python2 ；后来又装了python3 ；再后来使用了 pip ，默认包都是给python3用的&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;python2 的包一直没有更新&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;在使用 Let’s Ecrypt 生成SSL证书时，遇到了版本不兼容的坑&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学 - 系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="他山之玉" scheme="http://nontech.top/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%8E%89/"/>
    
  </entry>
  
  <entry>
    <title>centos7 let&#39;s encrypt</title>
    <link href="http://nontech.top/2021/02/02/centos7-let-s-encrypt/"/>
    <id>http://nontech.top/2021/02/02/centos7-let-s-encrypt/</id>
    <published>2021-02-02T03:17:21.000Z</published>
    <updated>2021-02-22T08:22:30.355Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载于：<a href="https://my.oschina.net/u/174201/blog/1577784">https://my.oschina.net/u/174201/blog/1577784</a></em></p><h2 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h2><p>如果要启用 HTTPS，我们需要一个 CA 证书，Let’s Encrypt 是一个免费的证书颁发机构，由 ISRG（Internet Security Research Group）运作。</p><a id="more"></a><h2 id="使用-Certbot-获取证书"><a href="#使用-Certbot-获取证书" class="headerlink" title="使用 Certbot 获取证书"></a>使用 Certbot 获取证书</h2><p>Certbot 是 Let’s Encrypt 官方推荐的证书获取工具，它可以帮助很方便的获取和更新 Let’s Encrypt 证书，Certbot 支持所有 Unix 内核的操作系统。</p><h2 id="安装-Certbot-客户端"><a href="#安装-Certbot-客户端" class="headerlink" title="安装 Certbot 客户端"></a>安装 Certbot 客户端</h2><pre><code>yum install -y epel-releaseyum install -y certbot</code></pre><p>注： 安装和执行 certbot 过程中，可能会报一些错误，这些错误主要是使用到的一些 python 库版本不匹配问题，根据错误提示更新安装相应版本的库即可。</p><p><em>如果遇到问题，可以参考我的这篇文章：centos7-certbot-python2-版本坑</em></p><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>因为使用 Certbot 获取证书时，Let’s Encrypt 服务器会访问 <a href="http://sub.domain.com/.well-known">http://sub.domain.com/.well-known</a> 来验证你的域名服务器，因此需要修改 nginx 配置文件，配置 .well-known 指向本地一个目录：</p><pre><code>server &#123;    ......    location /.well-known &#123;        alias /usr/local/nginx/html/.well-known;    &#125;    ......&#125;</code></pre><p>然后就可以使用 certbot 命令来获取证书了，获取证书时需要输入你的Email并接受用户条款。需要注意：-w 指定的 web 目录需要和前边 nginx 配置的 .well-known 的本地目录一致（/usr/local/nginx/html）：</p><pre><code>certbot certonly --webroot -w /usr/local/nginx/html/ -d sub.domain.com -m xxxxxx@xxx.com --agree-tos-w 指定 webroot 目录-d domain 想要获取的证书域名，支持多个域名</code></pre><p>但是有些时候我们的一些服务并没有根目录，例如一些微服务，这时候使用 –webroot 就走不通了。certbot 还有另外一种模式 –standalone，这种模式不需要指定网站根目录，他会自动启用服务器的443端口，来验证域名的归属。我们有其他服务（例如nginx）占用了443端口，就必须先停止这些服务，在证书生成完毕后，再启用。<br>    certbot certonly –standalone -d sub.domain.com -m <a href="mailto:&#120;&#120;&#x78;&#120;&#120;&#x78;&#64;&#x78;&#x78;&#120;&#46;&#x63;&#111;&#109;">&#120;&#120;&#x78;&#120;&#120;&#x78;&#64;&#x78;&#x78;&#120;&#46;&#x63;&#111;&#109;</a> –agree-tos</p><p>如果成功获取证书，你的密钥和证书存放在 /etc/letsencrypt/live/sub.domain.com/ 目录：</p><pre><code>ll /etc/letsencrypt/live/sub.domain.com/cert.pem -&gt; ../../archive/sub.domain.com/cert1.pemchain.pem -&gt; ../../archive/sub.domain.com/chain1.pemfullchain.pem -&gt; ../../archive/sub.domain.com/fullchain1.pemprivkey.pem -&gt; ../../archive/sub.domain.com/privkey1.pem</code></pre><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>cert.pem</td><td>服务端证书</td></tr><tr><td>chain.pem</td><td>浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书</td></tr><tr><td>fullchain.pem</td><td>包括了cert.pem和chain.pem的内容</td></tr><tr><td>privkey.pem</td><td>证书的私钥</td></tr></tbody></table><h2 id="删除证书"><a href="#删除证书" class="headerlink" title="删除证书"></a>删除证书</h2><p>有时需要删除已生成的证书，重新生成。可使用如下命令进行删除：</p><pre><code>certbot delete --cert-name sub.domain.com</code></pre><h2 id="生成-dhparam"><a href="#生成-dhparam" class="headerlink" title="生成 dhparam"></a>生成 dhparam</h2><p>nginx 配置 https 时，需要 dhparam，使用如下命令进行生成：</p><pre><code>openssl dhparam -out /etc/nginx/sites-enabled/dh4096.pem 4096</code></pre><h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><pre><code>server &#123;    listen 80;    server_name sub.domain.com;    rewrite ^ https://$server_name$request_uri? permanent;&#125;server &#123;    listen 443 ssl;    server_name sub.domain.com;    include /etc/nginx/sites-enabled/sub.domain.com.ssl;    location / &#123; try_files $uri @proxy_to_app; &#125;    location @proxy_to_app &#123;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header X-Forwarded-Proto https;        proxy_redirect off;        proxy_pass http://127.0.0.1:8080;    &#125;&#125;</code></pre><p>sub.domain.com.ssl 文件配置内容：</p><pre><code>ssl on;ssl_certificate /etc/letsencrypt/live/sub.domain.com/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/sub.domain.com/privkey.pem;ssl_prefer_server_ciphers on;ssl_dhparam /etc/nginx/sites-enabled/dhparam.pem;ssl_ciphers HIGH:!ADH:!MD5:!aNULL:!eNULL:!MEDIUM:!LOW:!EXP:!kEDH;ssl_protocols TLSv1.2 TLSv1.1 TLSv1;ssl_session_timeout 1d;ssl_session_cache shared:SSL:50m;ssl_stapling on;ssl_stapling_verify on;add_header Strict-Transport-Security max-age=15768000;</code></pre><h3 id="配置-tomcat"><a href="#配置-tomcat" class="headerlink" title="配置 tomcat"></a>配置 tomcat</h3><p>配置 tomcat 支持 https，有两处需要修改：<br>　～在 Connector 节点增加 proxyPort=”443”</p><pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    connectionTimeout=&quot;20000&quot;    redirectPort=&quot;8443&quot; proxyPort=&quot;443&quot; /&gt;</code></pre><p>　～添加如下 Value 节点</p><pre><code>&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;    remoteIpHeader=&quot;x-forwarded-for&quot;    remoteIpProxiesHeader=&quot;x-forwarded-by&quot;    protocolHeader=&quot;x-forwarded-proto&quot; /&gt;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="如果开启了防火墙，记得开放-443-端口"><a href="#如果开启了防火墙，记得开放-443-端口" class="headerlink" title="如果开启了防火墙，记得开放 443 端口"></a><em>如果开启了防火墙，记得开放 443 端口</em></h4><p>启动 nginx 或重新载入配置，使用浏览器打开 <a href="https://sub.domain.com/">https://sub.domain.com/</a></p><pre><code>service nginx reload</code></pre><p>可以使用在线工具 <a href="https://www.ssllabs.com/ssltest">https://www.ssllabs.com/ssltest</a> 来检测证书情况。</p><h3 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h3><p>Let’s Encrypt 证书只有 90 天有效期，我们需要在证书到期之前更新证书，certbot 提供了相应的命令: certbot renew。</p><pre><code>/usr/bin/certbot renew --dry-run</code></pre><p>可以将此更新命令添加到计划任务中，certbot renew 命令只会更新还有 30 天才会到期的证书，所以我们可以每隔 2 个月在凌晨3:30执行一次更新操作即可，创建一个新文件 certbot-auto-renew-cron，写入 cron 计划内容：</p><pre><code>30 3 * */2 * /usr/bin/certbot renew --post-hook &quot;service nginx restart&quot; --quiet &gt;&gt; /var/log/cerbot.log</code></pre><p>–pre-hook 这个参数表示执行更新操作之前要做的事情<br>–post-hook 这个参数表示执行更新操作完成后要做的事情</p><h3 id="启动-crontab-定时任务"><a href="#启动-crontab-定时任务" class="headerlink" title="启动 crontab 定时任务"></a>启动 crontab 定时任务</h3><pre><code>crontab certbot-auto-renew-cron</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;转载于：&lt;a href=&quot;https://my.oschina.net/u/174201/blog/1577784&quot;&gt;https://my.oschina.net/u/174201/blog/1577784&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Let’s-Encrypt&quot;&gt;&lt;a href=&quot;#Let’s-Encrypt&quot; class=&quot;headerlink&quot; title=&quot;Let’s Encrypt&quot;&gt;&lt;/a&gt;Let’s Encrypt&lt;/h2&gt;&lt;p&gt;如果要启用 HTTPS，我们需要一个 CA 证书，Let’s Encrypt 是一个免费的证书颁发机构，由 ISRG（Internet Security Research Group）运作。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学 - 系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="他山之玉" scheme="http://nontech.top/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%8E%89/"/>
    
  </entry>
  
  <entry>
    <title>Vue 2-&gt;3 生命周期</title>
    <link href="http://nontech.top/2021/02/01/Vue-2-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://nontech.top/2021/02/01/Vue-2-3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2021-02-01T08:56:21.000Z</published>
    <updated>2021-02-22T08:27:35.103Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2——————–&gt;vue3</p><p>beforeCreate　　-&gt;　　setup()</p><a id="more"></a><p>created　　　　　-&gt;　　setup()</p><p>beforeMount　　　-&gt;　onBeforeMount</p><p>mounted　　　　　-&gt;　onMounted</p><p>beforeUpdate　　-&gt;　　onBeforeUpdate</p><p>updated　　　　　-&gt;　　onUpdated</p><p>beforeDestroy　　-&gt;　　onBeforeUnmount</p><p>destroyed　　　　-&gt;　　onUnmounted</p><p>activated　　　　-&gt;　　onActivated</p><p>deactivated　　　-&gt; 　onDeactivated</p><p>errorCaptured　　-&gt; 　onErrorCaptured</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue2——————–&amp;gt;vue3&lt;/p&gt;
&lt;p&gt;beforeCreate　　-&amp;gt;　　setup()&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学 - 前端 - Vue" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-%E5%89%8D%E7%AB%AF-Vue/"/>
    
    
    <category term="他山之玉" scheme="http://nontech.top/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%8E%89/"/>
    
  </entry>
  
  <entry>
    <title>firewalld-防火墙 - 搬运</title>
    <link href="http://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/"/>
    <id>http://nontech.top/2021/02/01/firewalld-%E9%98%B2%E7%81%AB%E5%A2%99-%E6%90%AC%E8%BF%90/</id>
    <published>2021-02-01T08:19:56.000Z</published>
    <updated>2021-02-22T08:28:18.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h2><pre><code>//启动systemctl start firewalld//查看状态systemctl status firewalld</code></pre><a id="more"></a><pre><code>//停止systemctl stop firewalld//开机启用systemctl enable firewalld//开机禁用systemctl disable firewalld</code></pre><h2 id="端口："><a href="#端口：" class="headerlink" title="端口："></a>端口：</h2><p>开放/关闭端口：</p><pre><code>// 开放firewall-cmd --zone=public --add-port=80/tcp --permanent//关闭firewall-cmd --zone= public --remove-port=80/tcp --permanent--permanent(加上是永久生效)//重载firewall-cmd --reload（新增之后一定要重载才生效）</code></pre><p>查看开放的服务和端口：</p><pre><code>firewall-cmd --list-servicesfirewall-cmd --zone=public --list-ports</code></pre><h2 id="firewalld-cmd其他操作："><a href="#firewalld-cmd其他操作：" class="headerlink" title="firewalld-cmd其他操作："></a>firewalld-cmd其他操作：</h2><pre><code>//查看版本firewall-cmd --version//查看帮助firewall-cmd --help//显示状态firewall-cmd --state//查看所有打开的端口firewall-cmd --zone=public --list-ports//更新防火墙规则firewall-cmd --reload//查看区域信息firewall-cmd --get-active-zones//查看指定接口所属区域firewall-cmd --get-zone-of-interface=eth0//拒绝所有包firewall-cmd --panic-on//取消拒绝状态firewall-cmd --panic-off//查看是否拒绝firewall-cmd --query-panic</code></pre><h2 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h2><ol><li>systemctl是CentOS7的主要服务管理工具，融合了service和chkconfig的功能。</li><li>经常本地好好的，到远程就不行，多半是防火墙或权限的问题。</li><li>尽量不要关闭防火墙，有问题还是解决问题优先。</li><li>firewalld 和 iptables 据说是很类似的东西，有机会研究下。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本命令：&quot;&gt;&lt;a href=&quot;#基本命令：&quot; class=&quot;headerlink&quot; title=&quot;基本命令：&quot;&gt;&lt;/a&gt;基本命令：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;//启动
systemctl start firewalld

//查看状态
systemctl status firewalld
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="计算机科学 - 系统" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6-%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="他山之玉" scheme="http://nontech.top/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%8E%89/"/>
    
  </entry>
  
  <entry>
    <title>Useful links</title>
    <link href="http://nontech.top/2021/01/30/A-useful-link-Classmate-Wang/"/>
    <id>http://nontech.top/2021/01/30/A-useful-link-Classmate-Wang/</id>
    <published>2021-01-30T09:26:03.000Z</published>
    <updated>2021-02-23T01:21:08.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些干货满满的博客"><a href="#一些干货满满的博客" class="headerlink" title="一些干货满满的博客"></a>一些干货满满的博客</h2><h3 id="博哥的blog-https-www-xublog-wang"><a href="#博哥的blog-https-www-xublog-wang" class="headerlink" title="博哥的blog: https://www.xublog.wang"></a>博哥的blog: <em><a href="https://www.xublog.wang/">https://www.xublog.wang</a></em></h3><h3 id="不错的书房：https-www-kanshuv-com"><a href="#不错的书房：https-www-kanshuv-com" class="headerlink" title="不错的书房：https://www.kanshuv.com"></a>不错的书房：<em><a href="https://www.kanshuv.com/">https://www.kanshuv.com</a></em></h3><h3 id="不错的影院：https-dianying4k-com"><a href="#不错的影院：https-dianying4k-com" class="headerlink" title="不错的影院：https://dianying4k.com"></a>不错的影院：<em><a href="https://dianying4k.com/">https://dianying4k.com</a></em></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些干货满满的博客&quot;&gt;&lt;a href=&quot;#一些干货满满的博客&quot; class=&quot;headerlink&quot; title=&quot;一些干货满满的博客&quot;&gt;&lt;/a&gt;一些干货满满的博客&lt;/h2&gt;&lt;h3 id=&quot;博哥的blog-https-www-xublog-wang&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="计算机科学" scheme="http://nontech.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="好看的电影" scheme="http://nontech.top/tags/%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
    
    <category term="好看的书" scheme="http://nontech.top/tags/%E5%A5%BD%E7%9C%8B%E7%9A%84%E4%B9%A6/"/>
    
    <category term="通透的知识" scheme="http://nontech.top/tags/%E9%80%9A%E9%80%8F%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
